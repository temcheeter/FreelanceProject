from aiogram import types, F
from main import dp, bot
import db
import asyncio
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import random
import time
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import datetime

def kb():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üé≤Ô∏è –ö—É–±–∏–∫", callback_data="dice"))
    keyboard.add(InlineKeyboardButton(text="üé∞ Casino", callback_data="casino"))
    keyboard.add(InlineKeyboardButton(text="üß©Ô∏è Free", callback_data="free"))
    return keyboard

def give_puff(_ref):
    _user_id = _ref
    rare = "RARE Pod"
    rand = random.randint(0, len(db.get_rare(rare))-1)
    _rare = db.get_rare(rare)[rand]
    photo = _rare[1]
    caption = _rare[5]+'\n\n–ü–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É'
    fame = _rare[4]
    _fame, fame_all, fame_season = db.get_fame(_user_id)
    card = db.get_cards(_user_id)[0]
    db.set_fame(_user_id, int(fame)+int(_fame), fame_all, fame_season)
    db.update_cards(_user_id, card +", "+str(_rare[0]))
    return _rare

def get_next_monday():
    today = datetime.datetime.today()
    days_until_next_monday = (7 - today.weekday()) % 7
    next_monday = today + datetime.timedelta(days=days_until_next_monday)
    return next_monday.date()

@dp.callback_query(F.text == "jumanji")
async def jumanji(call: types.CallbackQuery):
    if not db.get_users_exist_state(call.from_user.id):
        db.add_user_to_state(call.from_user.id, '2020-03-03', '2023-08-10 00:59:37')
    await call.message.answer("üí¨Ô∏è–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞", reply_markup = kb())
    

@dp.callback_query(F.text == "dice")
async def Dice(call: types.CallbackQuery):
    user_id = call.from_user.id
    stat_time = datetime.datetime.strptime(db.get_states(user_id, 'state_dice'), '%Y-%m-%d').date()
    current_date = datetime.datetime.now().date()
    next_monday = get_next_monday()
    pp_time = datetime.datetime.strptime(db.get_info(user_id)[6], '%Y-%m-%d').date()
    if (stat_time < current_date):
        if pp_time > current_date:
                future_date = next_monday
                db.update_states(call.from_user.id, 'state_dice', future_date)
                msg = await bot.send_dice(user_id)
                _num1 = msg.dice.value
                msg = await bot.send_dice(user_id)
                _num2 = msg.dice.value
                await asyncio.sleep(3)
                await call.message.answer(f"""–ù–∞ üé≤Ô∏è –∫—É–±–∏–∫–∞—Ö –≤—ã–ø–∞–ª–∏ —á–∏—Å–ª–∞ <b>{_num1}</b> –∏ <b>{_num2}</b>\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{_num1 + _num2}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç""", parse_mode="HTML")
                prev_bt = db.get_botnet(user_id)[4]
                db.update_botnet(user_id, 'comp_points', _num1 + _num2 + prev_bt)
        else:
            future_date = next_monday
            db.update_states(call.from_user.id, 'state_dice', future_date)
            msg = await bot.send_dice(user_id)
            _num = msg.dice.value
            await asyncio.sleep(3)
            await call.message.answer(f"""–ù–∞ üé≤Ô∏è –∫—É–±–∏–∫–µ –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ <b>{_num}</b>\n\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{_num}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç""", parse_mode="HTML")
            prev_bt = db.get_botnet(user_id)[4]
            db.update_botnet(user_id, 'comp_points', _num + prev_bt)
    else:
        await call.message.answer(f"‚ö†Ô∏è –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –±—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...")


@dp.callback_query(F.text == "casino")  # –ò–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ "casino"
async def Casino(call: types.CallbackQuery):  # –ò–∑–º–µ–Ω–∏–ª–∏ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ Casino
    user_id = call.from_user.id
    stat_time = datetime.datetime.strptime(db.get_states(user_id, 'state_casino'), '%Y-%m-%d').date()
    current_date = datetime.datetime.now().date()
    next_monday = get_next_monday()
    pp_time = datetime.datetime.strptime(db.get_info(user_id)[6], '%Y-%m-%d').date()
    if pp_time > current_date:
        if (stat_time < current_date):
            future_date = next_monday
            db.update_states(call.from_user.id, 'state_casino', future_date)  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ 'state_casino'
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è "–∫–∞–∑–∏–Ω–æ-—Ä—É–ª–µ—Ç–∫–∏". –ù–∞–ø—Ä–∏–º–µ—Ä, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞, —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ –∏ —Ç.–¥.
            # –ü—Ä–∏–º–µ—Ä:
            random_value = random.randint(1, 10)  # –ó–¥–µ—Å—å –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
            winnings = random_value  # –ü—Ä–∏–º–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç
            await call.message.answer(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç!")
            prev_bt = db.get_botnet(user_id)[4]
            db.update_botnet(user_id, 'comp_points', winnings + prev_bt)
        else:
            await call.message.answer("‚ö†Ô∏è –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...")
    else:
        await call.message.answer("‚ö†Ô∏è –ö–∞–∑–∏–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±–ª–∞–¥–∞—Ç–µ–ª—è–º Pod Pass")

@dp.callback_query(F.text == "free")
async def free(call: types.CallbackQuery):
    user_id = call.from_user.id
    stat_time = datetime.datetime.strptime(db.get_states(user_id, 'state_free'), '%Y-%m-%d').date()
    current_date = datetime.datetime.now().date()
    next_monday = get_next_monday()
    if (stat_time < current_date):
        # –†–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        future_date = next_monday
        db.update_states(call.from_user.id, 'state_free', future_date)
        _rare = give_puff(user_id)
        photo = _rare[1]
        caption = _rare[5]+'\n\nüÜìÔ∏è –ü–æ–ª—É—á–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É'
        await bot.send_photo(user_id, photo, caption)
    else:
        await call.message.answer(f"‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ...")
