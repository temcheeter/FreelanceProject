import hashlib
from aiogram.enums import ParseMode
from aiogram import types, F
import time
from main import dp, bot

PAYOK_SECRET_KEY = 'b9eabe4fe269069f2466ac4f9cb862e8'
PAYOK_SHOP_ID = '10415'

def pp_text1():
    text = """üí≠ –ë—Ä–æ, –¥–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ <b>Pod Pass</b>, —ç—Ç–æ —Ä—é–∫–∑–∞—á–æ–∫, —Å –ø–æ–ª–µ–∑–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, –∞ –∏–º–µ–Ω–Ω–æ:

‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ. 
‚Ä¢ 3 —á–∞—Å–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã, –≤–º–µ—Å—Ç–æ 4
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—Ä–æ—Å–∞—Ç—å üé≤ –∫—É–±–∏–∫ –¥–≤–∞ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.
‚Ä¢ –ò–Ω–æ–≥–¥–∞ –∑–∞—Å—ã–ª–∞–µ–º —Ä–µ–¥—á–∞—à–π–∏–µ –∫–∞—Ä—Ç—ã.

üíº <b>Pod Pass - 100 —Ä—É–±–ª–µ–π</b>"""
    return text

def pp_text2(link):
    text = f"""üîë –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è <b>Pod Pass</b> –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫—É
–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å <a href="{link}">—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a>

‚ùó <b>–¢–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å Pod Pass –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 —á–∞—Å–æ–≤</b>

‚ÑπÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∏–ª–∏—Å—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ telegram desktop, –∏ —ç—Ç–æ—Ç —Å–ø–æ—Å–æ–± –∏–Ω–æ–≥–¥–∞ –±–∞–≥–∞–µ—Ç—Å—è 
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –≤ —Ä–µ–∂–∏–º–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω."""
    return text

def generate_payment_number(user_id):
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ user_id –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    timestamp = str(int(time.time()))
    payment_number = f"{user_id}_{timestamp}"
    return payment_number

def generate_payment_link(user_id, amount, currency, desc, email, method, lang):
    payment_number = generate_payment_number(user_id)
    sign_data = "|".join([str(amount), payment_number, str(PAYOK_SHOP_ID), currency, desc, PAYOK_SECRET_KEY])
    sign = hashlib.md5(sign_data.encode()).hexdigest()

    payment_url = "https://payok.io/pay"
    
    payment_params = {
        'amount': amount,
        'payment': payment_number,
        'shop': PAYOK_SHOP_ID,
        'currency': currency,
        'desc': desc,
        'email': email,
        'method': method,
        'lang': lang,
        'sign': sign
    }

    payment_link = payment_url + '?' + '&'.join([f'{key}={value}' for key, value in payment_params.items()])

    return payment_link


@dp.callback_query(F.text == ['pod_pass'])
async def generate_payment(call: types.CallbackQuery):
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    amount = 100.0
    currency = "RUB"
    desc = "Pod_Pass"
    email = "podscardbot@rambler.ru"
    method = "cd"
    lang = "RU" 

    payment_link = generate_payment_link(user_id, amount, currency, desc, email, method, lang)

    await bot.send_message(call.from_user.id, pp_text1(), parse_mode=ParseMode.HTML)
    await bot.send_message(call.from_user.id, pp_text2(payment_link), parse_mode=ParseMode.HTML)

#–Ω–µ–¥–æ–¥–µ–ª–∞–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
"""@app.route('/payment_notification', methods=['POST'])
def payment_notification():
    data = request.form

    sign_data = "|".join([
        PAYOK_SECRET_KEY,
        data.get('desc', ''),
        data.get('currency', ''),
        str(data.get('shop', '')),
        str(data.get('payment_id', '')),
        str(data.get('amount', ''))
    ])
    calculated_sign = hashlib.md5(sign_data.encode()).hexdigest()

    if calculated_sign != data.get('sign', ''):
        return 'Invalid signature', 400

    payment_id = data.get('payment_id')
    shop = data.get('shop')
    amount = data.get('amount')
    profit = data.get('profit')
    desc = data.get('desc')
    currency = data.get('currency')
    email = data.get('email')
    date = data.get('date')
    method = data.get('method')
    custom1 = data.get('custom[param1]')
    custom2 = data.get('custom[param2]')

    # –í–∞—à –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    return 'Notification received', 200

async def process_payment_notification(data):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ data
    payment_id = data.get('payment_id')
    shop = data.get('shop')
    amount = data.get('amount')
    profit = data.get('profit')
    desc = data.get('desc')
    currency = data.get('currency')
    email = data.get('email')
    date = data.get('date')
    method = data.get('method')
    custom1 = data.get('custom[param1]')
    custom2 = data.get('custom[param2]')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
    message = f"–ü–æ—Å—Ç—É–ø–∏–ª –ø–ª–∞—Ç–µ–∂:\n" \
              f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {payment_id}\n" \
              f"–ú–∞–≥–∞–∑–∏–Ω: {shop}\n" \
              f"–°—É–º–º–∞: {amount} {currency}\n" \
              f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n" \
              f"Email: {email}\n" \
              f"–î–∞—Ç–∞: {date}\n" \
              f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {method}\n" \
              f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä 1: {custom1}\n" \
              f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä 2: {custom2}"
    
    user_id = payment_id.text.split("_")[0]
    # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –≤–∞—à—É –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
    await bot.send_message(chat_id=user_id, text="–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ Pod Pass –Ω–∞ 1 –º–µ—Å—è—Ü")"""
