from aiogram import types, F
from main import dp, bot
import db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import datetime
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

class States(StatesGroup):
    name_squad = State()
    photo_squad = State()
    descript_squad = State()
    invite_sq = State()
    sq_acordc = State()
    delete_sq = State()
    dissolve_sq = State()
    new_photo_sq = State()
    new_desc_sq = State()

def cancel():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return keyboard

@dp.callback_query(F.text == "cancel")
async def cancell(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await call.message.answer("üö´Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ")

@dp.callback_query(F.text == "squads")
async def squads(call: types.CallbackQuery):
    if db.get_botnet(call.from_user.id)[5] == None: 
        keyboard = InlineKeyboardMarkup(1)
        keyboard.add(InlineKeyboardButton(text="üß∏Ô∏è –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–∫–≤–∞–¥", callback_data="add_squad"))
        keyboard.add(InlineKeyboardButton(text="‚òÇÔ∏è –í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–∫–≤–∞–¥", callback_data="join_squad"))
        await call.message.answer("üí¨Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ", reply_markup = keyboard)
    else:
        name = db.get_botnet(call.from_user.id)[5]
        photo = db.get_squad(name)[3]
        desc = db.get_squad(name)[2]
        owner = db.get_squad(name)[5]
        all_members = db.get_squad(name)[4]
        members = ""
        mem_num = 0
        if int(call.from_user.id) == int(owner):
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="üôÜ‚Äç‚ôÇÔ∏èÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ Squad", callback_data="invite_sq"))
            keyboard.add(InlineKeyboardButton(text="üôÖ‚Äç‚ôÇÔ∏èÔ∏è –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ Squad", callback_data="delete_sq"))
            keyboard.add(InlineKeyboardButton(text="‚ò†Ô∏è –†–∞—Å–ø—É—Å—Ç–∏—Ç—å Squad", callback_data="dissolve_sq"))
            keyboard.add(InlineKeyboardButton(text="‚úçÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Squad", callback_data="settings_sq"))
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton(text="‚õ±Ô∏è –ü–æ–∫–∏–Ω—É—Ç—å Squad", callback_data="leave_sq"))
        for i in range(len(all_members.split(", "))):
            memb_text = f"\n@{db.get_info(all_members.split(', ')[i])[2]} ({db.get_info(all_members.split(', ')[i])[3]} –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)"
            members += "".join(memb_text)
            mem_num += db.get_info(all_members.split(', ')[i])[3]
        db.set_squad(name, 'fame', mem_num)
        text = f"""<b>üß∏ Squad - {name}</b>

üçø –í—Å–µ–≥–æ: {mem_num} –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

<b>ü¶Å –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç:</b>
@{db.get_info(owner)[2]}

<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>{members}

<b>ü•∑ –û–ø–∏—Å–∞–Ω–∏–µ:</b>
{desc}"""
        await call.message.answer_photo(photo, text, reply_markup = keyboard, parse_mode="HTML")

@dp.callback_query(F.text == "join_squad")
async def join_squad(call: types.CallbackQuery):
    await call.message.answer(f"""üßü –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Å–∫–≤–∞–¥, —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ—Ç —Ç–µ–±—è –≤ —Å–≤–æ—é –±–∞–Ω–¥—É, –≤—ã—Å–ª–∞–≤ —Ç–µ–±–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.

ü™™ –õ–∏–±–æ –∂–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π Squad, –ø—Ä–∏–æ–±—Ä–µ—Ç—è <b>Pod Pass</b>.""", parse_mode="HTML")


@dp.callback_query(F.text == "add_squad")
async def add_squad(call: types.CallbackQuery):
    user_id = call.from_user.id
    current_date = datetime.datetime.now().date()
    pp_time = datetime.datetime.strptime(db.get_info(user_id)[6], '%Y-%m-%d').date()
    if (pp_time > current_date):
        await States.name_squad.set()
        await call.message.answer(f"‚ùìÔ∏è –ö–∞–∫ –Ω–∞–∑–æ–≤–µ—à—å —Å–≤–æ–π —Å–∫–≤–∞–¥?\n–î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)", reply_markup = cancel())
    else:
        await call.message.answer(f"‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ Squad –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å <b>Pod Pass</b>", parse_mode="HTML")

@dp.message(state=States.name_squad)
async def name_squad(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer(f"""üßü –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–¥—ã: {name}


üßë‚Äçüé® –¢–µ–ø–µ—Ä—å –∑–∞—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ—á–∫—É —Å–≤–æ–µ–π –±–∞–Ω–¥—ã, –≤–∏–∑—É–∞–ª —Å–∫–≤–∞–¥–∞ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω, –≤–µ—Ä–Ω–æ?

ü§¶‚Äç‚ôÇÔ∏è –ó–∞ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥–µ–º –±–∞–Ω–∏—Ç—å)""", reply_markup = cancel())
    await States.photo_squad.set()

@dp.message(content_types=types.ContentTypes.PHOTO, state=States.photo_squad)
async def photo_squad(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    photo = file_id
    await state.update_data(photo=photo)
    await message.answer(f"""üßë‚Äçüé® –û—Ç–ª–∏—á–Ω–æ, –Ω–µ–ø–ª–æ—Ö–æ–π –≤—ã–±–æ—Ä.

üßõ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞–∫–∏–¥–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞.
(–º–∞–∫—Å–∏–º—É–º 400 —Å–∏–º–≤–æ–ª–æ–≤)""", reply_markup = cancel())
    await States.descript_squad.set()

@dp.message(state=States.descript_squad)
async def descript_squad(message: types.Message, state: FSMContext):
    description = message.text
    _data = await state.get_data()
    squad_name = _data['name']
    squad_photo = _data['photo']
    user_id = message.from_user.id
    db.add_squad(squad_name, squad_photo, description, user_id)
    await message.answer_photo(squad_photo, f"<b>üß∏ Squad - {squad_name}</b>\n\nü•∑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:\n{description}</b>", parse_mode="HTML")
    await state.finish()

@dp.callback_query(F.text == "invite_sq")
async def invite_sq(call: types.CallbackQuery, state: FSMContext):
    await States.invite_sq.set()
    name = db.get_botnet(call.from_user.id)[5]
    photo = db.get_squad(name)[3]
    desc = db.get_squad(name)[2]
    await state.update_data(name=name)
    await state.update_data(photo=photo)
    await state.update_data(desc=desc)
    await call.message.answer("üí¨Ô∏è –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup = cancel())

@dp.message(state=States.invite_sq)
async def invite_sq(message: types.Message, state: FSMContext):
    sq_info = await state.get_data()
    sq_name = sq_info['name']
    sq_photo = sq_info['photo']
    sq_desc = sq_info['desc']
    username = message.text
    _data = username.split("@")
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_sq"))
    keyboard.add(InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="cancel"))
    try:
        _user = db.get_nickname(_data[1])[1]
        if db.get_botnet(_user)[5] != None:
            await message.answer("ü§∑‚Äç‚ôÇÔ∏èÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Å–∫–≤–∞–¥–µ")
        else:
            await bot.send_photo(_user, sq_photo, f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ Squad\n\n<b>üß∏ Squad - {sq_name}</b>\n\n<b>üçø –í—Å–µ–≥–æ:</b> {db.get_squad(sq_name)[6]} –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n\n<b>ü•∑ –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{sq_desc}", reply_markup = keyboard, parse_mode="HTML")
            await message.answer("üé´Ô∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            _state = dp.current_state(chat=_user, user=_user)
            await _state.set_state(States.sq_acordc)
            await _state.update_data(sq_name=sq_name)
    except:
        await message.answer("ü§∑‚Äç‚ôÇÔ∏èÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n–í–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–æ–∫—É –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å /start –≤ –±–æ—Ç–µ!")
    await state.finish()

@dp.callback_query(F.text == "accept_sq", state=States.sq_acordc)
async def sq_acordc(call: types.CallbackQuery, state: FSMContext):
    _user = call.from_user.id
    _data = await state.get_data()
    if db.get_botnet(_user)[5] == None:
        sq_name = _data['sq_name']
        db.update_botnet(_user, 'comp_id', sq_name)
        members = db.get_squad(sq_name)[4]
        db.set_squad(sq_name, 'members', str(members) + ", " + str(_user))
        await call.message.answer(f"–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ üß∏ Squad - {sq_name}")
    else:
        await call.message.answer("üë®‚Äçüë®‚Äçüëß‚Äçüë¶Ô∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–∫–≤–∞–¥–µ")
    await state.finish()

@dp.callback_query(F.text == "delete_sq")
async def delete_sq(call: types.CallbackQuery, state: FSMContext):
    await States.delete_sq.set()
    await call.message.answer("üí¨Ô∏è –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup = cancel())

@dp.message(state=States.delete_sq)
async def delete_sq(message: types.Message, state: FSMContext):
    username = message.text
    _data = username.split("@")
    _user = db.get_nickname(_data[1])[1]
    if message.chat.id == _user:
        await message.answer("ü§¶‚Äç‚ôÄÔ∏èÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–µ–±—è")
    else:
        sq_name = db.get_botnet(message.from_user.id)[5]
        members = db.get_squad(sq_name)[4]
        _members = members.split(", ")
        if str(_user) in _members:
            members = members.replace(f'{_user}, ', '').replace(f', {_user}', '')
            db.set_squad(sq_name, 'members', members)
            db.delete_botnet(_user, 'comp_id')
            await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω")
            await bot.send_message(_user, "‚ö†Ô∏è –í–ª–∞–¥–µ–ª–µ—Ü —Å–∫–≤–∞–¥–∞ –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å")
        else:
            await message.answer("ü§∑‚Äç‚ôÇÔ∏èÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    await state.finish()

@dp.callback_query(F.text == "dissolve_sq")
async def dissolve_sq(call: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üß∏Ô∏è –†–∞—Å–ø—É—Å–∏—Ç—å", callback_data="dis_sq"))
    keyboard.add(InlineKeyboardButton(text="üö´Ô∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="cancel"))
    await States.dissolve_sq.set()
    await call.message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å Squad?", reply_markup = keyboard)

@dp.callback_query(F.text == "dis_sq", state=States.dissolve_sq)
async def dissolve_sq(call: types.CallbackQuery, state: FSMContext):
    name = db.get_botnet(call.from_user.id)[5]
    members = db.get_squad(name)[4]
    members = members.split(", ")
    for i in range (len(members)):
        db.delete_botnet(members[i], 'comp_id')
        try:
            if str(call.from_user.id) != members[i]:
                await bot.send_message(members[i], "‚ö†Ô∏è –í–∞—à —Å–∫–≤–∞–¥ –±—ã–ª —Ä–∞—Å–ø—É—â–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")
        except:
            pass
    db.delete_squad(name)
    await call.message.answer("‚ö†Ô∏è –í—ã —Ä–∞—Å–ø—É—Å—Ç–∏–ª–∏ —Å–≤–æ–π Squad")
    await state.finish()

@dp.callback_query(F.text == "settings_sq")
async def settings_sq(call: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="üååÔ∏è –ü–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫—É", callback_data="change_photo"))
    keyboard.add(InlineKeyboardButton(text="ü•∑ –ü–æ–º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="change_desc"))
    keyboard.add(InlineKeyboardButton(text="üö´Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    await call.message.answer("üí¨Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ", reply_markup = keyboard)

@dp.callback_query(F.text == "change_photo")
async def change_photo(call: types.CallbackQuery, state: FSMContext):
    await States.new_photo_sq.set()
    await call.message.answer("üååÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–≤–æ–µ–≥–æ Squad", reply_markup = cancel())

@dp.message(content_types=types.ContentTypes.PHOTO, state=States.new_photo_sq)
async def new_photo_sq(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    photo = file_id
    db.set_squad(db.get_botnet(message.from_user.id)[5], 'squad_photo', photo)
    await message.answer("üååÔ∏è –§–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await state.finish()

@dp.callback_query(F.text == "change_desc")
async def change_desc(call: types.CallbackQuery, state: FSMContext):
    await States.new_desc_sq.set()
    await call.message.answer("üìùÔ∏è –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ Squad", reply_markup = cancel())

@dp.message(state=States.new_desc_sq)
async def new_desc_sq(message: types.Message, state: FSMContext):
    desc = message.text
    db.set_squad(db.get_botnet(message.from_user.id)[5], 'description', desc)
    await message.answer("ü•∑ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await state.finish()

@dp.callback_query(F.text == "leave_sq")
async def leave_sq(call: types.CallbackQuery, state: FSMContext):
    _user = call.from_user.id
    sq_name = db.get_botnet(call.from_user.id)[5]
    members = db.get_squad(sq_name)[4]
    members = members.replace(f'{_user}, ', '').replace(f', {_user}', '')
    db.set_squad(sq_name, 'members', members)
    db.delete_botnet(_user, 'comp_id')
    await call.message.answer("‚ö†Ô∏è –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Å–∫–≤–∞–¥")
